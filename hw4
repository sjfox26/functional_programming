#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;;homework 4- written in Racket
;; put your code below

(define (sequence low high stride)
  (if (> low high)
      '()
      (cons low (sequence (+ low stride) high stride))))

(define (string-append-map xs suffix)
  (map (lambda (x) (string-append x suffix)) xs))

(define (list-nth-mod xs n)
  (define lstlngth (length xs))
  (define xs-copy xs)
  (define (l-n-m lst i)
    (cond [(< n 0) (error "list-nth-mod: negative number")]
          [(= (length xs) 0) (error "list-nth-mod: empty list")]
          [#t (if (= (remainder (length xs) n) (car lst)) (- lstlngth (length (cdr lst))) (l-n-m (cdr lst) n))]))
  (l-n-m xs-copy n))

(define (stream-for-n-steps stream n)
  (if (= n 0)
      '()
      (cons (car (stream)) (stream-for-n-steps (cdr (stream)) (- n 1)))))

(define funny-number-stream
  (letrec ([f (lambda (x) (if (= (remainder x 5) 0)
                               (cons (- 0 x) (lambda () (f (+ x 1))))
                               (cons x (lambda () (f (+ x 1)))))
                               )])
    (lambda () (f 1))))

(define dan-then-dog
  (letrec ([f (lambda (pic) (cons pic (lambda () (if (string=? pic "dan.jpg")
                                                     (f "dog.jpg")
                                                     (f "dan.jpg")))))])
    (lambda () (f "dan.jpg"))))


(define (stream-add-zero s)
  (letrec ([f (lambda (str) (cons (cons 0 (car (str))) (lambda () (f (cdr (str))))))])
    (lambda () (f s))))

(define (cycle-lists xs ys)
  (letrec ([f (lambda (as bs) (cons (cons (car as) (car bs)) (lambda () (f (if (equal? (cdr as) '())
                                                                               xs
                                                                               (cdr as))
                                                                           (if (equal? (cdr bs) '())
                                                                               ys
                                                                               (cdr bs))))))])
    (lambda () (f xs ys))))

(define (vector-assoc v vec)
  (letrec ([f (lambda (val vctr i) (cond [(>= i (vector-length vctr)) #f]
                                          [(equal? #f (pair? (vector-ref vctr i)))
                                           (f val vctr (+ i 1))]
                                          [(equal? val (car (vector-ref vctr i)))
                                           (vector-ref vctr i)]
                                          [#t (f val vctr (+ i 1))]
                                          ))])
    (f v vec 0)))

(define (cached-assoc xs n)
  (letrec ([memo (make-vector n #f)]
           [slot 0]
           [f (lambda (v)
                (let ([ans (vector-assoc v memo)])
                  (if ans
                      (cdr ans)
                      (let ([new-ans (if (equal? (car (assoc v xs)) v)
                                         (assoc v xs)
                                         (f v))])
                        (begin
                          (vector-set! memo slot new-ans)
                          (if (= n (+ 1 slot))
                              (set! slot 0)
                              (set! slot (+ slot 1)))
                          new-ans)))))])
    f))